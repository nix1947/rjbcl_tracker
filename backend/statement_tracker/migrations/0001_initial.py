# Generated by Django 5.2 on 2025-06-09 02:53

import django.db.models.deletion
import django.utils.timezone
import statement_tracker.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email Address')),
                ('username', models.CharField(max_length=150, unique=True)),
                ('full_name', models.CharField(max_length=255, verbose_name='Full Name')),
                ('mobile', models.CharField(blank=True, max_length=20, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='BankStatement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bank_code', models.CharField(help_text='NBL', max_length=255)),
                ('bank_name', models.CharField(help_text='Bank name', max_length=255)),
                ('bank_account_no', models.CharField(help_text='Bank account number', max_length=255, null=True)),
                ('bank_deposit_date', models.DateField(blank=True, help_text='Bank deposit date', null=True)),
                ('balance', models.DecimalField(decimal_places=2, help_text='Bank balance', max_digits=10)),
                ('bank_transaction_detail', models.CharField(help_text='Bank transaction detail', max_length=255, null=True)),
                ('debit', models.DecimalField(blank=True, decimal_places=2, help_text='Debit amount', max_digits=10, null=True)),
                ('credit', models.DecimalField(blank=True, decimal_places=2, help_text='Credit amount', max_digits=10, null=True)),
                ('system_voucher_no', models.CharField(blank=True, help_text='System voucher number (e.g., RP300181820000001)', max_length=255, null=True)),
                ('system_amount', models.DecimalField(blank=True, decimal_places=2, help_text='System amount', max_digits=10, null=True)),
                ('policy_no', models.CharField(help_text='Policy number(s), e.g., 2156, 2122', max_length=500, null=True)),
                ('remarks', models.TextField(blank=True, help_text='Remarks', null=True)),
                ('branch', models.CharField(blank=True, choices=[('head_office', 'प्रधान कार्यलय'), ('chabahil', 'चाबहिल'), ('lagankhel', 'लगनखेल'), ('kalanki', 'कलंकी'), ('suryabinayak', 'सूर्यविनायक'), ('banepa', 'बनेपा'), ('biratnagar', 'विराटनगर'), ('birgunj', 'वीरगञ्ज'), ('pokhara', 'पोखरा'), ('butwal', 'बुटवल'), ('nepalgunj', 'नेपालगञ्ज'), ('dhangadhi', 'धनगढी'), ('hetauda', 'हेटौडा'), ('bhaktapur', 'भक्तपुर'), ('lalitpur', 'ललितपुर'), ('baglung', 'बागलुङ'), ('dhankuta', 'धनकुटा'), ('birtamod', 'बिर्तामोड'), ('narayangadh', 'नारायणगढ'), ('ghorahi', 'घोराही')], help_text='Receipt Issue From Branch', max_length=255, null=True)),
                ('source', models.CharField(blank=True, choices=[('Cheque', 'Cheque'), ('BankVoucher', 'Physical Bank Voucher'), ('PhonePay', 'PhonePay'), ('ConnectIPS', 'ConnectIPS'), ('Esewa', 'Esewa'), ('Khalti', 'Khalti'), ('IMEPAY', 'IMEPAY'), ('NEPALPAY', 'NEPALPAY'), ('Other', 'Other')], help_text='Transaction Source', max_length=50, null=True)),
                ('bank_voucher', models.FileField(blank=True, null=True, upload_to='vouchers/', validators=[statement_tracker.models.BankStatement.validate_file_size])),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='bankstatement_createdby', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Bank Statement',
                'verbose_name_plural': 'Bank Statements',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='BankStatementChangeHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bank_code', models.CharField(help_text='NBL', max_length=255)),
                ('bank_name', models.CharField(help_text='Bank name', max_length=255)),
                ('bank_account_no', models.CharField(help_text='Bank account number', max_length=255, null=True)),
                ('bank_deposit_date', models.DateField(blank=True, help_text='Bank deposit date', null=True)),
                ('balance', models.DecimalField(decimal_places=2, help_text='Bank balance', max_digits=10)),
                ('bank_transaction_detail', models.CharField(help_text='Bank transaction detail', max_length=255, null=True)),
                ('debit', models.DecimalField(blank=True, decimal_places=2, help_text='Debit amount', max_digits=10, null=True)),
                ('credit', models.DecimalField(blank=True, decimal_places=2, help_text='Credit amount', max_digits=10, null=True)),
                ('system_voucher_no', models.CharField(blank=True, help_text='System voucher number', max_length=255, null=True)),
                ('system_amount', models.DecimalField(blank=True, decimal_places=2, help_text='System amount', max_digits=10, null=True)),
                ('policy_no', models.CharField(help_text='Policy number(s)', max_length=500, null=True)),
                ('remarks', models.TextField(blank=True, help_text='Remarks', null=True)),
                ('branch', models.CharField(blank=True, help_text='Receipt Issue From Branch', max_length=255, null=True)),
                ('source', models.CharField(blank=True, help_text='Transaction Source', max_length=50, null=True)),
                ('changed_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('action', models.CharField(choices=[('UPDATE', 'Update'), ('DELETE', 'Delete')], help_text='Change action type', max_length=10)),
                ('bank_statement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='change_history', to='statement_tracker.bankstatement')),
                ('changed_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Bank Statement Change History',
                'verbose_name_plural': 'Bank Statement Change History',
                'ordering': ['-changed_at'],
            },
        ),
        migrations.AddConstraint(
            model_name='bankstatement',
            constraint=models.UniqueConstraint(fields=('bank_code', 'balance', 'credit', 'bank_deposit_date'), name='unique_bank_statement'),
        ),
    ]
